# -*- coding: utf-8 -*-
"""HW2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dRJBGQnRBbwChgdGF0Gd9egPGAl5WY_-

##### `google colab` بارگذاری فایل در
"""

from google.colab import files
files.upload()  # This will allow you to upload the kaggle.json file

"""##### .را از سیستم خود آپلود کنیم `kaggle.json` کدی که در بالا نوشته شده است به ما این امکان را میدهد تا فایل
***

##### انتقال فایل و تنظیم مجوز دسترسی
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""##### :با اجرای این سه خط کد
##### ساخته میشود kaggle یک پوشه برای فایل‌های
##### فایل به آن پوشه منتقل می‌شود
##### مجوز دسترسی مناسب به فایل داده می‌شود
***

!pip install kagglehub

***
##### کردن کتابخانه های مورد نیاز import
"""

import kagglehub
path = kagglehub.dataset_download("manmandes/malimg")
print("Path to dataset files:", path)

"""##### دانلود دیتاسیت مورد نظر و چاپ کردن مسیر ذخیره سازی آن
***

##### کردن کتابخانه های مورد نیاز import
"""

import os
import numpy as np
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

"""***
##### دانلود دیتاسیت مورد نظر و چاپ کردن مسیر ذخیره سازی آن
"""

dataset_path = os.path.join(path, "malimg_dataset")
classes = os.listdir(dataset_path)

"""***"""

import imghdr

X = []
y = []

for subfolder in ['train', 'test', 'val']:
    folder_path = os.path.join(dataset_path, subfolder)
    if os.path.isdir(folder_path):
        for label_folder, _, files in os.walk(folder_path):  # عبور از پوشه‌ها و زیرپوشه‌ها
            for file in files:
                img_path = os.path.join(label_folder, file)
                if os.path.isfile(img_path) and imghdr.what(img_path):  # چک کردن فایل‌های تصویری
                    img = Image.open(img_path).convert('L')
                    img = img.resize((64, 64))
                    X.append(np.array(img))
                    y.append(label_folder.split("/")[-1])  # گرفتن نام پوشه به عنوان برچسب

"""##### :توضیحات کد
##### در این قسمت از کد، تصاویر موجود در پوشه های مختلف بارگذاری میشوند و برای هر تصویر عملیات پیش پردازش انجام میگیرد
##### لیسیتی برای ذخیره سازی داده های تصویری x
##### لیستی برای ذخیره سازی برچسب های مربوط به هر تصویر y
##### برای هر پوشه، زیرپوشه و وفایل های آن بررسی میشوند و برای هر فایل مسیر آن ساخته میشود
##### برای هر فایل ابتدا بررسی میشود که آیا فایل تصویر است یا خیر سپس تصویر بارگذاری و به خاکستری تبدیل میشود
##### اندازه تصویر به 64*64 تغییر پیدا میکند تا تصاویر اندازه های یکسانی داشته باشند
##### اضافه مشیود x تصویر به آرایه تبدیل میشود و به لیست
##### اضاغه میشود y نام پوشه ای که تصویر در آن قرار دارد که نمایانگر تصویر کلاس است به عنوان برچسب استخراج میشود و به لیست
##### این قطعه کد به ما کمک میکند تا داده های تصویری را از پوشه های مختلف به همراه برچسب های آنها بارگذاری کرده و برای پردازش بعدی آماده کنیم

***

##### آماده سازی داده ها برای مدل
"""

X = np.array(X)
X = X.reshape(len(X), -1)  # Flattening the images into vectors
encoder = LabelEncoder()
y = encoder.fit_transform(y)

"""##### تصاویر به آرایه عددی و سپس به بردار تبدیل میشوند تا در مدل قابل استفاده باشند
##### برچسب ها که به صورت رشته هستند، به عدد تبدیل میشوند
***

##### تقسیم داده ها به آموزش و تست
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""***
##### کردن کتابخانه های مورد نیاز import
"""

from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

"""***
### Naïve Bayes Model
"""

# Naïve Bayes Model
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_y_pred = nb_model.predict(X_test)
print("Naïve Bayes Classification Report:")
print(classification_report(y_test, nb_y_pred, target_names=encoder.classes_))

"""##### در این بخش یک مدل گوسیان برای دسته بندی داده ها استفاده میشود که مراحل این روش به شرح زیر است
####  **ایجاد مدل**
##### یک مدل ایجاد میشود که برای دسته بندی داده هایی که ویژگی آنها توزیع نرمال دارند، مناسب است  GussianNB() با استفاده از
####  **آموزش مدل**
##### انجام میشود fit() آموزش داده میشوند که این کار توسط تابع y_train و برچسب های آموزشی x_train مدل با استفاده از داده های آموزشی
####  **پیش بینی با مدل**
##### پیش بینی برچسب ها انجام میشود x_test پس از آموزش مدل، با استفاده از داده های آزمایشی   
####  **ارزیابی مدل**
##### برای ارزیابی مدل، گزارش دقت دسته بندی چاپ میشود که این گزارش، شامل معیار های دقت، صحت، بازخوانی و نمره برای هر کلاس است
***

### K-Nearest Neighbors (KNN) Model
"""

# K-Nearest Neighbors (KNN) Model
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(X_train, y_train)
knn_y_pred = knn_model.predict(X_test)
print("K-Nearest Neighbors (KNN) Classification Report:")
print(classification_report(y_test, knn_y_pred, target_names=encoder.classes_))

"""##### برای دسته بندی داده ها استفاده میشود که مراحل این روش به شرح زیر استKNN در این بخش از مدل
####  **ایجاد مدل**
##### به این معنی است که پیش بینی برای هرنمونه براساس 5 نزدیکترین همسایه آن انجام میشود n_neighbors=5ایجاد میشود. دراین مدل، پارامترKNN یک مدل
####  **آموزش مدل**
##### انجام میشود fit() آموزش داده میشوند که این کار توسط تابع y_train و برچسب های آموزشی x_train مدل با استفاده از داده های آموزشی
####  **پیش بینی با مدل**
##### ذخیره میشودknn_y_pred انجام میشود. پیش بینی متغیرها در x_test پس از آموزش مدل، پیش بینی برچسب ها برای داده آموزشی
####  **ارزیابی مدل**
##### برای ارزیابی مدل، گزارش دقت دسته بندی چاپ میشود که این گزارش، شامل معیار های دقت، صحت، بازخوانی و نمره برای هر کلاس است
***

### Random Forest Model
"""

# Random Forest Model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_y_pred = rf_model.predict(X_test)
print("Random Forest Classification Report:")
print(classification_report(y_test, rf_y_pred, target_names=encoder.classes_))

"""##### برای دسته بندی داده ها استفاده میشود که مراحل آن به شرح زیر استRandom Forest در این بخش از مدل
####  **ایجاد مدل**
##### به این معنی است که جنگل تصادفی از 100 درخت تصمیم ساخته شده است n_estimators=100 یک مدل ایجاد میشود که
####  **آموزش مدل**
##### انجام میشود fit() آموزش داده میشوند که این کار توسط تابع y_train و برچسب های آموزشی x_train مدل با استفاده از داده های آموزشی
####  **پیش بینی با مدل**
##### ذخیره میشود rf_y_pred انجام میشود. پیش بینی متغیرها در x_test پس از آموزش مدل، پیش بینی برچسب ها برای داده آموزشی
####  **ارزیابی با مدل**
##### برای ارزیابی مدل، گزارش دقت دسته بندی چاپ میشود که این گزارش، شامل معیار های دقت، صحت، بازخوانی و نمره برای هر کلاس است
***

### Logistic Regression Model
"""

# Logistic Regression Model
lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train, y_train)
lr_y_pred = lr_model.predict(X_test)
print("Logistic Regression Classification Report:")
print(classification_report(y_test, lr_y_pred, target_names=encoder.classes_))

"""##### برای دسته بندی داده ها استفاده میشود که مراحل آن به شرح زیر استlogic regression در این بخش از مدل
####  **ایجاد مدل**
##### به این معنی است که مدل حداکثر 1000 بار تلاش میکند تا  الگوریتم خود را بهینه کند max_iter=1000 یک مدل ایجاد میشود که
####  **آموزش مدل**
##### انجام میشود fit() آموزش داده میشوند که این کار توسط تابع y_train و برچسب های آموزشی x_train مدل با استفاده از داده های آموزشی
####  **پیش بینی با مدل**
##### ذخیره میشود lr_y_pred انجام میشود. پیش بینی متغیرها در x_test پس از آموزش مدل، پیش بینی برچسب ها برای داده آموزشی
####  **ارزیابی با مدل**
##### برای ارزیابی مدل، گزارش دقت دسته بندی چاپ میشود که این گزارش، شامل معیار های دقت، صحت، بازخوانی و نمره برای هر کلاس است
"""